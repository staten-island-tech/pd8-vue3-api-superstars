// your api is argument
export default (api) => {
    // plugin setup
    return (Vue, options) => {
        if (!options) {
            options = {
                // alternative: false,
                forEvery: false
            }
        }
        // create mixin
        Vue.mixin({
            created: function() {
                // we mount VueApi only to $root
                // mounting to all components is expensive
                // you can do it with forEvery param;
                // Is it root element?
                if (options.forEvery || this.$parent === undefined) {
                    this.api = {};
                    // if (options.alternative) {
                        // Do you want to get data with command like
                        // MyComponent.$root.api('getUsers') ?
                        // this.api = async function (action) {
                        //     let url = actions[action]
                        //     let data = await fetch(action)
                        //     return data
                        // }
                    // };
                    // service in your api modules
                    for (let SvcName in api) {
                        // your svc
                        let svc = api[SvcName];
                        // method in svc
                        for (let method in svc) {
                            // actual method
                            let cb = svc[method];
                            // if cb is function
                            if (typeof cb === 'function') {
                                // mount method to api property of root component
                                // so, you can invoke it like:
                                // this.$root.api.getUsers()
                                this.api[method] = svc[method];
                            }  else {
                                console.error(`VueApi: non-function callback specified for ${SvcName}.${method}`)
                            }
                        }
                    }
                }
            }
        })
    }
}
